#!/usr/bin/env bash

if [ -f smack-env.sh ]; then
  source ./smack-env.sh
fi

create_app() {
  echo "Creating $1 marathon app.."
  local res=$(curl -s -X POST http://$MESOS_HOST:8080/v2/apps -d "$2" -H "Content-type: application/json")
  local id=$(echo $res | jq -r '.deployments[0].id')
  echo "[CREATED] App name: $1, id: $id"
}

delete_app() {
  echo "Destroying $1 marathon app.."
  local res=$(curl -s -X DELETE http://$MESOS_HOST:8080/v2/apps/$1)
  local deploymentId=$(echo $res | jq -r '.deploymentId')
  echo "[DESTROYED] App name: $1, deploymentId: $deploymentId"
}

query_app() {
  curl -s -X GET http://$MESOS_HOST:8080/v2/apps/$1 | jq -r $2
}

is_running() {
  [ $(query_app $1 '.app.tasks[0].state') == "TASK_RUNNING" ]
}

is_healthy() {
  [ $(query_app $1 '.app.tasks[0].healthCheckResults[0].alive') == "true" ]
}

get_host() {
  echo $(query_app $1 '.app.tasks[0].host')
}

get_port_index() {
  echo $(query_app $1 ".app.tasks[0].ports[$2]")
}

wait_healthyness() {
  printf "Wait for $1 healthyness"
  until is_healthy $1
  do
    sleep 2
    printf "."
  done
  printf " OK\n"
}

if [ $# -ne 1 ] && [ "$1" != "up" ] && [ "$1" != "down" ]; then
  echo "Invalid arguments. Usage: $0 [up|down]"
  exit 1
fi

if [ "$1" == "up" ]; then

  # launch one kafka-seed instance
  kafkaSeed=`cat $APP_PATH/marathon/kafka.json`
  kafkaSeed="${kafkaSeed/kafka/kafka-seed}"
  create_app "kafka-seed" "${kafkaSeed/\$MESOS_HOST/$MESOS_HOST}"

  # launch one cassandra-seed instance
  cassandraSeed=`cat $APP_PATH/marathon/cassandra.json`
  cassandraSeed="${cassandraSeed/cassandra/cassandra-seed}"
  create_app "cassandra-seed" "${cassandraSeed/\$CASSANDRA_CONTACT_POINTS/}"

  # launch one smack-seed instance
  smackSeed=`cat $APP_PATH/marathon/smack-seed.json`
  create_app "smack-seed" "${smackSeed/\$SENTRY_DNS/$SENTRY_DNS}"

  # launch two kafka-node instances
  wait_healthyness "kafka-seed"
  kafkaNode=`cat $APP_PATH/marathon/kafka.json`
  kafkaNode="${kafkaNode/kafka/kafka-node}"
  kafkaNode="${kafkaNode/\"instances\": 1/\"instances\": 2}"
  create_app "kafka-node" "${kafkaNode/\$MESOS_HOST/$MESOS_HOST}"

  # launch two cassandra-node instances
  wait_healthyness "cassandra-seed"
  cassandraNode=`cat $APP_PATH/marathon/cassandra.json`
  cassandraNode="${cassandraNode/cassandra/cassandra-node}"
  cassandraNode="${cassandraNode/\"instances\": 1/\"instances\": 2}"
  cassandraSeedHost=$(get_host "cassandra-seed")
  create_app "cassandra-node" "${cassandraNode/\$CASSANDRA_CONTACT_POINTS/$cassandraSeedHost}"

  wait_healthyness "smack-seed"
  akkaSeedAddr=$(get_host "smack-seed")":"$(get_port_index "smack-seed" 0)
  cassandraSeedAddr="$cassandraSeedHost:9042"
  kafkaSeedAddr=$(get_host "kafka-seed")":9092"

  wait_healthyness "kafka-node"
  wait_healthyness "cassandra-node"
  
  # execute migration
  echo "Execute project migration.."
  $APP_PATH/scripts/run-main migrate --debug false --force --create-keyspace --environment production --loglevel info --cassandra-contact-points=$cassandraSeedAddr
  
  # create kafka logs topic
  echo "Creating kafka logs topic.."
  $KAFKA_HOME/bin/kafka-topics.sh --zookeeper $MESOS_HOST:2181/kafka --create --topic logsprod --partitions=3 --replication-factor 2

  #launch three smack-frontend instances
  smackFrontend=`cat $APP_PATH/marathon/smack-frontend.json`
  smackFrontend="${smackFrontend/\$AKKA_SEEDS/$akkaSeedAddr}"
  smackFrontend="${smackFrontend/\$SENTRY_DNS/$SENTRY_DNS}"
  create_app "smack-frontend" "${smackFrontend/\"instances\": 1/\"instances\": 3}"

  #launch three smack-backend instances
  smackBackend=`cat $APP_PATH/marathon/smack-backend.json`
  smackBackend="${smackBackend/\$AKKA_SEEDS/$akkaSeedAddr}"
  smackBackend="${smackBackend/\$CASSANDRA_CONTACT_POINTS/$cassandraSeedAddr}"
  smackBackend="${smackBackend/\$KAFKA_BOOTSTRAPS/$kafkaSeedAddr}"
  smackBackend="${smackBackend/\$SENTRY_DNS/$SENTRY_DNS}"
  create_app "smack-backend" "${smackBackend/\"instances\": 1/\"instances\": 3}"

  #launch three smack-service instances
  smackService=`cat $APP_PATH/marathon/smack-service.json`
  smackService="${smackService/\$AKKA_SEEDS/$akkaSeedAddr}"
  smackService="${smackService/\$CASSANDRA_CONTACT_POINTS/$cassandraSeedAddr}"
  smackService="${smackService/\$KAFKA_BOOTSTRAPS/$kafkaSeedAddr}"
  smackService="${smackService/\$SENTRY_DNS/$SENTRY_DNS}"
  create_app "smack-service" "${smackService/\"instances\": 1/\"instances\": 3}"

fi

if [ "$1" == "down" ]; then

  # delete smack-service instances
  delete_app "smack-service"

  # delete smack-backend instances
  delete_app "smack-backend"

  # delete smack-frontend instances
  delete_app "smack-frontend"
  
  # delete cassandra-node instances
  delete_app "cassandra-node"
  
  # create kafka logs topic
  echo "Deleting kafka logs topic.."
  $KAFKA_HOME/bin/kafka-topics.sh --zookeeper $MESOS_HOST:2181/kafka --alter --topic logsprod --config retention.ms=1000
  $KAFKA_HOME/bin/kafka-topics.sh --zookeeper $MESOS_HOST:2181/kafka --delete --topic logsprod

  # delete kafka-node instance
  delete_app "kafka-node"

  # delete smack-seed instance
  delete_app "smack-seed"

  # delete cassandra-seed instance
  delete_app "cassandra-seed"

  # delete kafka-seed instance
  delete_app "kafka-seed"

fi
